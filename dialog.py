import os # remove old files
import threading # to unfreese the UI
import pythoncom # for hardware detection
import markdown # convert report from markdown to html
import tkinter as tk # UI
from tkinter import ttk, font, filedialog # UI
import webbrowser # open links in standard browser
import subprocess # execute PowerShell scripts for hardware detection and to list standard folders in home catalog
import re # edit text files, generated by PowerShell
import wmi # hardware detection in Windows
from datetime import datetime # timestamp in report
from report import Report # a class for step 1 -- get system info
from app_context import AppContext # filenames and other variables
from backup import Backup # define input/output folders and perform backup

def open_link(link):
  webbrowser.open_new(link)

def get_status(step_index, isNovice, context: AppContext):
  normal_font = font.Font(family="Helvetica", size=11)
  bold_font = font.Font(family="Helvetica", size=11, weight="bold")
  if isNovice:
    steps = ["0. Intro", "1. Gather Info", "2. Backup", "3. Prepare Media"]
  else:
    steps = ["1. Gather Info", "2. Backup", "3. Prepare Media"]

  status_frame = tk.Frame(context.root)
  status_frame.pack(pady=10, anchor="n")
  for i, step in enumerate(steps):
    lbl_font = bold_font if i == step_index else normal_font
    label = tk.Label(status_frame, text=step, font=lbl_font)
    label.pack(side="left")

    if i < len(steps) - 1:
      sep = tk.Label(status_frame, text=" > ", font=normal_font)
      sep.pack(side="left")

def backup_novice(context: AppContext):
  context.set_root_title("Let's back up your data")
  clear_screen(context)
  get_status(2, True, context)
  context.set_root_label("Let's back up your data")
  backup = Backup(context)
  destination_label = ttk.Label(context.root, text="Your current destination folder: " + backup.destination_folder)
  button_frame = ttk.Frame(context.root)
  button_frame.pack(pady=10)
  destination_btn = ttk.Button(button_frame, text="Set destination folder", width=20, command=lambda: backup.set_destination(destination_label, context))
  destination_btn.grid(row=0, column=0, padx=10, pady=5, sticky="n")
  destination_desc = ttk.Label(button_frame, text="Here you set the folder, where to put your archive", justify="left", wraplength=400)
  destination_desc.grid(row=0, column=1, padx=10, sticky="w")
  source_btn = ttk.Button(button_frame, text="Add source folder", width=20, command=lambda: backup.add_folder(context))
  source_btn.grid(row=1, column=0, padx=10, pady=5, sticky="n")
  source_desc = ttk.Label(frame, text="Here you can add folders to the archive", justify="left", wraplength=400)
  source_desc.grid(row=1, column=1, padx=10, sticky="w")
  destination_label.pack(side="left", fill="x", expand=True)

  if context.backup_input == []:
    context.backup_input = backup.get_default_folders();
  if context.backup_input != []:
    for i in context.backup_input:
      backup.display_folder(i, context)

  bottom_frame = ttk.Frame(context.root)
  bottom_frame.pack(pady=10)
  back_btn = ttk.Button(frame, text="Back", width=20, command=lambda: launch_novice_mode(context))
  back_btn.grid(row=0, column=0, padx=10, pady=5, sticky="w")
  home_btn = ttk.Button(frame, text="Home", width=20, command=lambda: home(context))
  home_btn.grid(row=0, column=1, padx=10, pady=5, sticky="w")
  estimate_btn = ttk.Button(frame, text="Estimate size and time", width=20, command=lambda: open_link(f"file://{os.path.abspath(context.html_report)}"))
  estimate_btn.grid(row=0, column=2, padx=10, pady=5, sticky="e")
  backup_btn = ttk.Button(frame, text="Perform backup", width=20, command=lambda: open_link(f"file://{os.path.abspath(context.html_report)}"))
  backup_btn.grid(row=0, column=2, padx=10, pady=5, sticky="e")
  next_btn = ttk.Button(frame, text="Next", width=20, command=lambda: media_novice(context))
  next_btn.grid(row=0, column=3, padx=10, pady=5, sticky="e")
  context.quit_button()

def media_novice(context: AppContext):
  context.set_root_title("Let's prepare your installation media")
  clear_screen(context)
  get_status(3, True, context)
  context.set_root_label("Let's prepare your installation media")
  context.quit_button()

def get_info(context: AppContext):
  context.set_root_title("Gathering software and hardware info")
  clear_screen(context)
  get_status(1, True, context)
  context.set_root_label("Now we are gathering software and hardware info")

  #  global progress 
  context.start_progress()

def clear_screen(context: AppContext):
  for widget in context.root.winfo_children():
    widget.destroy()

def launch_novice_mode(context: AppContext):
  context.set_root_title("LMTK: Are you familiar with Linux?")
  clear_screen(context)
  context.set_root_label("LMTK: Are you familiar with Linux?")
  get_status(0, True, context)
  text_frame = ttk.Frame(context.root)
  text_frame.pack(padx=10, pady=10, fill="x")
  text_frame.configure(height=200)  
  scrollbar = ttk.Scrollbar(text_frame, orient="vertical")
  scrollbar.pack(side="right", fill="y")
  guide_content = """\
So, you're going to install Linux. But are you familiar with Linux?

If not, there are some resources to help you master it without too much risk:
- Git for Windows -- includes bash and core command-line utilities, as well as vim text editor.
- VirtualBox -- you'll be able to install and play any Linux distribution you like in a sandbox.
- LiveCD -- you'll be able to boot into Linux and at least check if your hardware works.

The most common question you get , is 'What distribution should I use?'
Well, I recommend Ubuntu or Fedora to have a pleasant start.

The next question is 'What desktop environment should I use?'
I recommend Gnome if you have enough memory or XFCE, if you don't. :)

Here are some links (all of them are LiveCDs, by the way):
- Fedora (Gnome-based)
- Fedora XFCE
- Ubuntu (Gnome-based)
- Ubuntu XFCE

When you click 'Next', we'll gather information about your software and hardware, save it as Markdown (.md) and HTML (.html) reports for future use.
"""
  text = tk.Text(text_frame, height=25, width=100, wrap="word", font=("Helvetica", 11), bd=0, bg=context.root.cget("bg"), relief="flat", highlightthickness=0, yscrollcommand=scrollbar.set)
  text.pack(side="left", fill="both", expand=True)
  text.insert("1.0", guide_content)
  scrollbar.config(command=text.yview)
  text.tag_config("line_spacing", spacing3=6)  # spacing in pixels
  text.tag_add("line_spacing", "1.0", "end")
  text.config(state="disabled")

  links = [
    ("link_gitForWindows", "4.2", "4.17", "https://git-scm.com/downloads/win"),
    ("link_virtualbox", "5.2", "5.12", "https://www.virtualbox.org/wiki/Downloads"),
    ("link_fedora_gnome", "15.2", "15.22", "https://fedoraproject.org/workstation/download"),
    ("link_fedora_xfce", "16.2", "16.13", "https://fedoraproject.org/spins/xfce/download"),
    ("link_ubuntu_gnome", "17.2", "17.23", "https://ubuntu.com/download/desktop"),
    ("link_ubuntu_xfce", "18.2", "18.13", "https://xubuntu.org/download/"),
    ]

  for tag, start, end, url in links:
    text.tag_add(tag, start, end)
    text.tag_config(tag, foreground="blue")
    text.tag_bind(tag, "<Button-1>", lambda event, url=url: open_link(url))

  text.config(state=tk.DISABLED)

  # buttons
  button_frame = ttk.Frame(context.root)
  button_frame.pack(padx=10, pady=10, anchor="center")
  home_btn = ttk.Button(button_frame, text="Home", width=20, command=lambda: home(context))
  home_btn.grid(row=0, column=0, padx=10, pady=5, sticky="w")
  next_btn = ttk.Button(button_frame, text="Next", width=20, command=lambda: get_info(context))
  next_btn.grid(row=0, column=1, padx=10, pady=5, sticky="e")
  context.quit_button()

def launch_expert_mode(context: AppContext):
  print("Expert Mode selected")

def is_powershell_installed():
  try:
    subprocess.run(
      ["powershell", "-Command", "Write-Output 'OK'"],
      stdout=subprocess.DEVNULL,
      stderr=subprocess.DEVNULL,
      check=True
      )
    return True
  except (FileNotFoundError, subprocess.CalledProcessError):
    return False

def home(context: AppContext):
  clear_screen(context)
  context.set_root_title("Welcome to Linux Migration Toolkit!")
  context.set_root_label("Welcome to Linux Migration Toolkit! Choose Your Mode")

  # general info
  text_intro = "Welcome to the Linux Migration Toolkit for the desktop! This app gathers information about your installed programs and hardware for future use, helps you back up your data, and assists in preparing installation media using external tools."
  intro_text = ttk.Label(context.root, text=text_intro, wraplength=600, justify="left")
  intro_text.pack(padx=20, pady=20)

  # buttons
  frame = ttk.Frame(context.root)
  frame.pack(pady=10)
  novice_btn = ttk.Button(frame, text="Novice Mode", width=20, command=lambda: launch_novice_mode(context))
  novice_btn.grid(row=0, column=0, padx=10, pady=5, sticky="n")
  novice_desc = ttk.Label(frame, text="For each step you'll have useful guidance and links.\nAlso use it if you use this program for the first time.", justify="left", wraplength=400)
  novice_desc.grid(row=0, column=1, padx=10, sticky="w")

  expert_btn = ttk.Button(frame, text="Expert Mode", width=20, command=lambda: launch_expert_mode(context))
  expert_btn.grid(row=1, column=0, padx=10, pady=5, sticky="n")
  expert_desc = ttk.Label(frame, text="You know what the program does.", justify="left", wraplength=400)
  expert_desc.grid(row=1, column=1, padx=10, sticky="w")

  # PowerShell check
  text_ps_installed = "PowerShell is installed. We'll need it to do some stuff."
  text_ps_not_installed = "PowerShell is not installed. Please install it and restart the app."

  if is_powershell_installed():
    ps_text = ttk.Label(context.root, text=text_ps_installed, wraplength=600, justify="left")
    ps_text.pack(padx=20, pady=20)
  else:
    ps_text = ttk.Label(context.root, text=text_ps_not_installed, wraplength=600, justify="left")
    ps_text.pack(padx=20, pady=20)
    novice_btn.config(state="disabled")
    expert_btn.config(state="disabled")

  context.quit_button()

  reddit_text = ttk.Label(context.root, text="Thanks to all the guys and gals in reddit.com/r/linuxsucks/, you're my inspiration.", wraplength=600, justify="left")
  reddit_text.pack(padx=20, pady=20)

context = AppContext()
home(context)
context.run()

